{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _carbonComponents = require(\"carbon-components\");\n\nvar _types = require(\"../../prop-types/types\");\n\nvar _deprecate = _interopRequireDefault(require(\"../../prop-types/deprecate\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar prefix = _carbonComponents.settings.prefix;\n\nvar Button = _react.default.forwardRef(function Button(_ref, ref) {\n  var _classNames;\n\n  var children = _ref.children,\n      as = _ref.as,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      small = _ref.small,\n      size = _ref.size,\n      kind = _ref.kind,\n      href = _ref.href,\n      tabIndex = _ref.tabIndex,\n      type = _ref.type,\n      ButtonImageElement = _ref.renderIcon,\n      iconDescription = _ref.iconDescription,\n      hasIconOnly = _ref.hasIconOnly,\n      tooltipPosition = _ref.tooltipPosition,\n      tooltipAlignment = _ref.tooltipAlignment,\n      other = _objectWithoutProperties(_ref, [\"children\", \"as\", \"className\", \"disabled\", \"small\", \"size\", \"kind\", \"href\", \"tabIndex\", \"type\", \"renderIcon\", \"iconDescription\", \"hasIconOnly\", \"tooltipPosition\", \"tooltipAlignment\"]);\n\n  var buttonClasses = (0, _classnames.default)(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--btn\"), true), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--field\"), size === 'field'), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--sm\"), size === 'small' || small), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--primary\"), kind === 'primary'), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--danger\"), kind === 'danger'), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--secondary\"), kind === 'secondary'), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--ghost\"), kind === 'ghost'), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--danger--primary\"), kind === 'danger--primary'), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--tertiary\"), kind === 'tertiary'), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefix, \"--btn--icon-only\"), hasIconOnly), _defineProperty(_classNames, \"\".concat(prefix, \"--tooltip__trigger\"), hasIconOnly), _defineProperty(_classNames, \"\".concat(prefix, \"--tooltip--a11y\"), hasIconOnly), _defineProperty(_classNames, \"\".concat(prefix, \"--tooltip--\").concat(tooltipPosition), hasIconOnly && tooltipPosition), _defineProperty(_classNames, \"\".concat(prefix, \"--tooltip--align-\").concat(tooltipAlignment), hasIconOnly && tooltipAlignment), _classNames));\n  var commonProps = {\n    tabIndex: tabIndex,\n    className: buttonClasses,\n    ref: ref\n  };\n  var buttonImage = !ButtonImageElement ? null : _react.default.createElement(ButtonImageElement, {\n    \"aria-label\": iconDescription,\n    className: \"\".concat(prefix, \"--btn__icon\"),\n    \"aria-hidden\": \"true\"\n  });\n  var component = 'button';\n  var otherProps = {\n    disabled: disabled,\n    type: type\n  };\n  var anchorProps = {\n    role: 'button',\n    href: href\n  };\n  var assistiveText = hasIconOnly ? _react.default.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--assistive-text\")\n  }, iconDescription) : null;\n\n  if (as) {\n    component = as;\n    otherProps = _objectSpread({}, otherProps, {}, anchorProps);\n  } else if (href) {\n    component = 'a';\n    otherProps = anchorProps;\n  }\n\n  return _react.default.createElement(component, _objectSpread({}, other, {}, commonProps, {}, otherProps), assistiveText, children, buttonImage);\n});\n\nButton.propTypes = {\n  /**\n   * Specify the content of your Button\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Specify how the button itself should be rendered.\n   * Make sure to apply all props to the root node and render children appropriately\n   */\n  as: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),\n\n  /**\n   * Specify an optional className to be added to your Button\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * Specify whether the Button should be disabled, or not\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * Specify the size of the button, from a list of available sizes.\n   * For `default` buttons, this prop can remain unspecified.\n   */\n  size: _propTypes.default.oneOf(['default', 'field', 'small']),\n\n  /**\n   * Deprecated in v10 in favor of `size`.\n   * Specify whether the Button should be a small variant\n   */\n  small: (0, _deprecate.default)(_propTypes.default.bool, \"\\nThe prop `small` for Button has been deprecated in favor of `size`. Please use `size=\\\"small\\\"` instead.\"),\n\n  /**\n   * Specify the kind of Button you want to create\n   */\n  kind: _types.ButtonTypes.buttonKind.isRequired,\n\n  /**\n   * Optionally specify an href for your Button to become an <a> element\n   */\n  href: _propTypes.default.string,\n\n  /**\n   * Optional prop to specify the tabIndex of the Button\n   */\n  tabIndex: _propTypes.default.number,\n\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: _propTypes.default.oneOf(['button', 'reset', 'submit']),\n\n  /**\n   * Optional prop to specify the role of the Button\n   */\n  role: _propTypes.default.string,\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * If specifying the `renderIcon` prop, provide a description for that icon that can\n   * be read by screen readers\n   */\n  iconDescription: function iconDescription(props) {\n    if (props.renderIcon && !props.children && !props.iconDescription) {\n      return new Error('renderIcon property specified without also providing an iconDescription property.');\n    }\n\n    return undefined;\n  },\n\n  /**\n   * Specify if the button is an icon-only button\n   */\n  hasIconOnly: _propTypes.default.bool,\n\n  /**\n   * Specify the direction of the tooltip for icon-only buttons.\n   * Can be either top, right, bottom, or left.\n   */\n  tooltipPosition: _propTypes.default.oneOf(['top', 'right', 'bottom', 'left']),\n\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment: _propTypes.default.oneOf(['start', 'center', 'end'])\n};\nButton.defaultProps = {\n  tabIndex: 0,\n  type: 'button',\n  disabled: false,\n  kind: 'primary'\n};\nvar _default = Button;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}