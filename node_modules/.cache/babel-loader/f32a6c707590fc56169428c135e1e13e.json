{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _carbonComponents = require(\"carbon-components\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _AriaPropTypes = require(\"../../prop-types/AriaPropTypes\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n} // TO-DO: comment back in when footer is added for rails\n// import SideNavFooter from './SideNavFooter';\n\n\nvar prefix = _carbonComponents.settings.prefix;\n\nvar SideNav = _react.default.forwardRef(function SideNav(props, ref) {\n  var _cx, _cx2;\n\n  var expandedProp = props.expanded,\n      defaultExpanded = props.defaultExpanded,\n      isChildOfHeader = props.isChildOfHeader,\n      ariaLabel = props['aria-label'],\n      ariaLabelledBy = props['aria-labelledby'],\n      children = props.children,\n      onToggle = props.onToggle,\n      customClassName = props.className,\n      isFixedNav = props.isFixedNav,\n      isRail = props.isRail,\n      isPersistent = props.isPersistent,\n      addFocusListeners = props.addFocusListeners,\n      addMouseListeners = props.addMouseListeners;\n\n  var _useRef = (0, _react.useRef)(expandedProp !== undefined),\n      controlled = _useRef.current;\n\n  var _useState = (0, _react.useState)(defaultExpanded),\n      _useState2 = _slicedToArray(_useState, 2),\n      expandedState = _useState2[0],\n      setExpandedState = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(defaultExpanded),\n      _useState4 = _slicedToArray(_useState3, 2),\n      expandedViaHoverState = _useState4[0],\n      setExpandedViaHoverState = _useState4[1];\n\n  var expanded = controlled ? expandedProp : expandedState;\n\n  var handleToggle = function handleToggle(event) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !expanded;\n\n    if (!controlled) {\n      setExpandedState(value);\n    }\n\n    if (onToggle) {\n      onToggle(event, value);\n    }\n\n    if (controlled || isRail) {\n      setExpandedViaHoverState(value);\n    }\n  };\n\n  var accessibilityLabel = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  }; // TO-DO: comment back in when footer is added for rails\n  // const assistiveText = expanded\n  //   ? t('carbon.sidenav.state.open')\n  //   : t('carbon.sidenav.state.closed');\n\n  var className = (0, _classnames.default)((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--side-nav\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav--expanded\"), expanded || expandedViaHoverState), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav--collapsed\"), !expanded && isFixedNav), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav--rail\"), isRail), _defineProperty(_cx, customClassName, !!customClassName), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav--ux\"), isChildOfHeader), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav--hidden\"), !isPersistent), _cx));\n  var overlayClassName = (0, _classnames.default)((_cx2 = {}, _defineProperty(_cx2, \"\".concat(prefix, \"--side-nav__overlay\"), true), _defineProperty(_cx2, \"\".concat(prefix, \"--side-nav__overlay-active\"), expanded), _cx2));\n  var childrenToRender = children; // if a rail, pass the expansion state as a prop, so children can update themselves to match\n\n  if (isRail) {\n    childrenToRender = _react.default.Children.map(children, function (child) {\n      // if we are controlled, check for if we have hovered over or the expanded state, else just use the expanded state (uncontrolled)\n      var currentExpansionState = controlled ? expandedViaHoverState || expanded : expanded;\n      return _react.default.cloneElement(child, {\n        isSideNavExpanded: currentExpansionState\n      });\n    });\n  }\n\n  var eventHandlers = {};\n\n  if (addFocusListeners) {\n    eventHandlers.onFocus = function (event) {\n      return handleToggle(event, true);\n    };\n\n    eventHandlers.onBlur = function (event) {\n      return handleToggle(event, false);\n    };\n  }\n\n  if (addMouseListeners) {\n    eventHandlers.onMouseEnter = function () {\n      return handleToggle(true, true);\n    };\n\n    eventHandlers.onMouseLeave = function () {\n      return handleToggle(false, false);\n    };\n  }\n\n  return _react.default.createElement(_react.default.Fragment, null, isFixedNav ? null : _react.default.createElement(\"div\", {\n    className: overlayClassName\n  }), _react.default.createElement(\"nav\", _extends({\n    ref: ref,\n    className: \"\".concat(prefix, \"--side-nav__navigation \").concat(className)\n  }, accessibilityLabel, eventHandlers), childrenToRender));\n});\n\nSideNav.defaultProps = {\n  translateById: function translateById(id) {\n    var translations = {\n      'carbon.sidenav.state.open': 'Close',\n      'carbon.sidenav.state.closed': 'Open'\n    };\n    return translations[id];\n  },\n  defaultExpanded: false,\n  isChildOfHeader: true,\n  isFixedNav: false,\n  isPersistent: true,\n  addFocusListeners: true,\n  addMouseListeners: true\n};\nSideNav.propTypes = _objectSpread({\n  /**\n   * If `true`, the SideNav will be expanded, otherwise it will be collapsed.\n   * Using this prop causes SideNav to become a controled component.\n   */\n  expanded: _propTypes.default.bool,\n\n  /**\n   * If `true`, the SideNav will be open on initial render.\n   */\n  defaultExpanded: _propTypes.default.bool,\n\n  /**\n   * An optional listener that is called when an event that would cause\n   * toggling the SideNav occurs.\n   *\n   * @param {object} event\n   * @param {boolean} value\n   */\n  onToggle: _propTypes.default.func\n}, _AriaPropTypes.AriaLabelPropType, {\n  /**\n   * Optionally provide a custom class to apply to the underlying <li> node\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * Provide a custom function for translating all message ids within this\n   * component. This function will take in two arguments: the mesasge Id and the\n   * state of the component. From this, you should return a string representing\n   * the label you want displayed or read by screen readers.\n   */\n  translateById: _propTypes.default.func,\n\n  /**\n   * Optionally provide a custom class to apply to the underlying <li> node\n   */\n  isChildOfHeader: _propTypes.default.bool,\n\n  /**\n   * Optional prop to display the side nav rail.\n   */\n  isRail: _propTypes.default.bool,\n\n  /**\n   * Specify if sideNav is standalone\n   */\n  isFixedNav: _propTypes.default.bool,\n\n  /**\n   * Specify if the sideNav will be persistent above the lg breakpoint\n   */\n  isPersistent: _propTypes.default.bool,\n\n  /**\n   * Specify whether focus and blur listeners are added. They are by default.\n   */\n  addFocusListeners: _propTypes.default.bool,\n\n  /**\n   * Specify whether mouse entry/exit listeners are added. They are by default.\n   */\n  addMouseListeners: _propTypes.default.bool\n});\nvar _default = SideNav;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}